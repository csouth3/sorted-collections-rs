var searchIndex = {};
searchIndex['sorted-collections'] = {"items":[[0,"","sorted-collections","sorted-collections-rs is a library providing useful extension traits and convenience\nmethods for ordered collections in Rust."],[0,"sortedmap","","A trait extending ordered maps, along with associated impls and iterators."],[3,"BTreeMapRangeRemove","sorted-collections::sortedmap","A double-ended by-value iterator for removing pairs from a BTreeMap."],[8,"SortedMapExt","","An extension trait for a `Map` whose keys have a defined total ordering.\nThis trait defines convenience methods which take advantage of the map's ordering."],[16,"RangeRemove","sorted-collections::sortedmap::SortedMapExt","A by-value iterator yielding key-value pairs whose keys fall within a given range and\nwhich have just been removed from this map."],[10,"first","sorted-collections::sortedmap","Returns an immutable reference to the first (least) key currently in this map.\nReturns `None` if this map is empty.",0],[10,"first_remove","","Removes and returns the first (least) key currently in this map and its associated value.\nReturns `None` if this map is empty.",0],[10,"last","","Returns an immutable reference to the last (greatest) key currently in this map.\nReturns `None` if this map is empty.",0],[10,"last_remove","","Removes and returns the last (greatest) key currently in this map and its associated value.\nReturns `None` if this map is empty.",0],[10,"ceiling","","Returns an immutable reference to the least key in this map greater than or equal to `key`.\nReturns `None` if there is no such key.",0],[10,"ceiling_remove","","Removes and returns the least key in this map greater than or equal to `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"floor","","Returns an immutable reference to the greatest key in this map less than or equal to `key`.\nReturns `None` if there is no such key.",0],[10,"floor_remove","","Removes and returns the greatest key in this map less than or equal to `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"higher","","Returns an immutable reference to the least key in this map strictly greater than `key`.\nReturns `None` if there is no such key.",0],[10,"higher_remove","","Removes and returns the least key in this map strictly greater than `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"lower","","Returns an immutable reference to the greatest key in this map strictly less than `key`.\nReturns `None` if there is no such key.",0],[10,"lower_remove","","Removes and returns the greatest key in this map strictly less than `key` and its\nassociated value.\nReturns `None` if there is no such element.",0],[10,"range_remove","","Removes the key-value pairs of this map whose keys lie in the range starting at `from_key`\nand ending at `to_key`, and returns a double-ended by-value iterator over the removed pairs.",0],[6,"RangeRemove","",""],[11,"first","collections::btree::map","",1],[11,"first_remove","","",1],[11,"last","","",1],[11,"last_remove","","",1],[11,"ceiling","","",1],[11,"ceiling_remove","","",1],[11,"floor","","",1],[11,"floor_remove","","",1],[11,"higher","","",1],[11,"higher_remove","","",1],[11,"lower","","",1],[11,"lower_remove","","",1],[11,"range_remove","","",1],[6,"Item","sorted-collections::sortedmap",""],[11,"next","","",2],[11,"size_hint","","",2],[11,"next_back","","",2],[11,"len","","",2],[0,"sortedset","sorted-collections","A trait extending ordered sets, along with associated impls and iterators."],[3,"BTreeSetRangeRemove","sorted-collections::sortedset","A double-ended by-value iterator for removing pairs from a BTreeSet."],[8,"SortedSetExt","","An extension trait for a `Set` whose elements have a defined total ordering.\nThis trait defines convenience methods which take advantage of the set's ordering."],[16,"RangeRemove","sorted-collections::sortedset::SortedSetExt","A by-value iterator yielding elements within a given range which have just been removed\nfrom this set."],[10,"first","sorted-collections::sortedset","Returns an immutable reference to the first (least) element currently in this set.\nReturns `None` if this set is empty.",3],[10,"first_remove","","Removes and returns the first (least) element currently in this set.\nReturns `None` if this set is empty.",3],[10,"last","","Returns an immutable reference to the last (greatest) element currently in this set.\nReturns `None` if this set is empty.",3],[10,"last_remove","","Removes and returns the last (greatest) element currently in this set.\nReturns `None` if this set is empty.",3],[10,"ceiling","","Returns an immutable reference to the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",3],[10,"ceiling_remove","","Removes and returns the least element in this set greater than or equal to `elem`.\nReturns `None` if there is no such element.",3],[10,"floor","","Returns an immutable reference to the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",3],[10,"floor_remove","","Removes and returns the greatest element in this set less than or equal to `elem`.\nReturns `None` if there is no such element.",3],[10,"higher","","Returns an immutable reference to the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",3],[10,"higher_remove","","Removes and returns the least element in this set strictly greater than `elem`.\nReturns `None` if there is no such element.",3],[10,"lower","","Returns an immutable reference to the greatest element in this set strictly less than `elem`.\nReturns `None` if there is no such element.",3],[10,"lower_remove","","Removes and returns the greatest element in this set strictly less than `elem`.\nReturns `None` if there is no such element.",3],[10,"range_remove","","Removes the elements of this set in the range starting at `from_elem` and ending at\n`to_elem`, and returns a double-ended by-value iterator yielding the removed elements.",3],[6,"RangeRemove","",""],[11,"first","collections::btree::set","",4],[11,"first_remove","","",4],[11,"last","","",4],[11,"last_remove","","",4],[11,"ceiling","","",4],[11,"ceiling_remove","","",4],[11,"floor","","",4],[11,"floor_remove","","",4],[11,"higher","","",4],[11,"higher_remove","","",4],[11,"lower","","",4],[11,"lower_remove","","",4],[11,"range_remove","","",4],[6,"Item","sorted-collections::sortedset",""],[11,"next","","",5],[11,"size_hint","","",5],[11,"next_back","","",5],[11,"len","","",5]],"paths":[[8,"SortedMapExt"],[3,"BTreeMap"],[3,"BTreeMapRangeRemove"],[8,"SortedSetExt"],[3,"BTreeSet"],[3,"BTreeSetRangeRemove"]]};
initSearch(searchIndex);
